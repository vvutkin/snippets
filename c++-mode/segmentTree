# -*- mode: snippet -*-
# name: segmentTree
# uuid: segmentTree
# key: segmentTree
# condition: t
# --
template <typename C>
concept any_iterable_collection = requires(C c) {
  { c.begin() } -> std::forward_iterator;
  { c.end() } -> std::forward_iterator;
  { const_cast<const C&>(c).begin() } -> std::forward_iterator;
  { const_cast<const C&>(c).end() } -> std::forward_iterator;
};

template <typename T = int>
  requires std::is_integral_v<T>
class SegmentTree {
 private:
  size_t n;
  std::vector<T> A, st, lazy;
  std::vector<int> lazyFlag;

  size_t l(size_t p) { return p << 1; }

  size_t r(size_t p) { return (p << 1) + 1; }

  int conquer(int a, int b) {
    if (a == -1)
      return b;
    if (b == -1)
      return a;
    return std::min(a, b);
  }

  void build(int p, int L, int R) {
    if (L == R)
      st[p] = A[L];
    else {
      int m = (L + R) / 2;
      build(l(p), L, m);
      build(r(p), m + 1, R);
      st[p] = conquer(st[l(p)], st[r(p)]);
    }
  }

  void propagate(size_t p, size_t L, size_t R) {
    if (lazyFlag[p]) {
      st[p] = lazy[p];
      if (L != R)
        lazy[l(p)] = lazy[r(p)] = lazy[p];
      else
        A[L] = lazy[p];
      lazyFlag[p] = 0;
    }
  }

  T RMQ(size_t p, size_t L, size_t R, size_t i, size_t j) {
    propagate(p, L, R);
    if (i > j)
      return -1;
    if ((L >= i) && (R <= j))
      return st[p];
    size_t mid = L + (R - L) / 2;
    return conquer(RMQ(l(p), L, mid, i, std::min(mid, j)),
                   RMQ(r(p), mid + 1, R, std::max(i, mid + 1), j));
  }

  void update(size_t p, size_t L, size_t R, size_t i, size_t j, T val) {
    propagate(p, L, R);
    if (i > j)
      return;
    if ((L >= i) && (R <= j)) {
      lazy[p] = val;
      lazyFlag[p] = 1;
      propagate(p, L, R);
    } else {
      size_t m = L + (R - L) / 2;
      update(l(p), L, m, i, std::min(m, j), val);
      update(r(p), m + 1, R, std::max(i, m + 1), j, val);
      T lsubtree = (lazyFlag[l(p)]) ? lazy[l(p)] : st[l(p)];
      T rsubtree = (lazyFlag[r(p)]) ? lazy[r(p)] : st[r(p)];
      st[p] = (lsubtree <= rsubtree) ? st[l(p)] : st[r(p)];
    }
  }

 public:
  SegmentTree(size_t sz)
      : n(sz), st(4 * n), lazy(4 * n, 0), lazyFlag(4 * n, 0) {}

  template <typename Container>
    requires any_iterable_collection<Container> &&
             std::is_convertible_v<typename Container::value_type, T>
  SegmentTree(const Container& initialA) : SegmentTree(initialA.size()) {
    A.reserve(initialA.size());
    std::copy(std::begin(initialA), std::end(initialA), std::back_inserter(A));
    build(1, 0, n - 1);
  }

  void update(size_t i, size_t j, T val) { update(1, 0, n - 1, i, j, val); }

  T RMQ(size_t i, size_t j) { return RMQ(1, 0, n - 1, i, j); }
};