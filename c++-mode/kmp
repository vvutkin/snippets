# -*- mode: snippet -*-
# name: kmp
# uuid: kmp
# key: kmp
# condition: t
# --
class KMP {
  const std::string &pattern;
  std::vector<int> pi;

  void prefix_function(const std::string &s) {
    int n = s.size(), j{0};
    pi.resize(n);
    for (int i = 1; i < n; ++i) {
      j = pi[i - 1];
      while (j > 0 && s[i] != s[j])
        j = pi[j - 1];
      if (s[i] == s[j])
        j++;
      pi[i] = j;
    }
  }

public:
  KMP(const std::string &p) : pattern(p) { prefix_function(pattern); }

  size_t search(const std::string &text, size_t start = 0,
                bool matchAtStart = false) {
    int n = text.size(), m = pattern.size();
    int q = matchAtStart ? pi[m - 1] : 0;
    start = matchAtStart ? start + m : start;
    for (size_t i = start; i < n; ++i) {
      while (q > 0 && pattern[q] != text[i])
        q = pi[q - 1];
      if (pattern[q] == text[i])
        ++q;
      if (q == m)
        return i - m + 1;
    }
    return std::string::npos;
  }
};